#include <iostream>
using namespace std;

// 1. Factorial Calculation
int factorial(int n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

// 2. Fibonacci Series
int fibonacci(int n) {
    if (n <= 1) {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

// 3. Sum of Natural Numbers
int sumOfNaturals(int n) {
    if (n <= 0) {
        return 0;
    }
    return n + sumOfNaturals(n - 1);
}

// 4. GCD (Greatest Common Divisor)
int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

// 5. Tower of Hanoi
void towerOfHanoi(int n, char source, char auxiliary, char destination) {
    if (n == 1) {
        cout << "Move disk 1 from " << source << " to " << destination << endl;
        return;
    }
    towerOfHanoi(n - 1, source, destination, auxiliary);
    cout << "Move disk " << n << " from " << source << " to " << destination << endl;
    towerOfHanoi(n - 1, auxiliary, source, destination);
}

// 6. Binary Search
int binarySearch(int arr[], int low, int high, int target) {
    if (low > high) {
        return -1;
    }
    int mid = (low + high) / 2;
    if (arr[mid] == target) {
        return mid;
    } else if (arr[mid] > target) {
        return binarySearch(arr, low, mid - 1, target);
    } else {
        return binarySearch(arr, mid + 1, high, target);
    }
}

// 7. Sum of Array Elements
int sumOfArray(int arr[], int n) {
    if (n <= 0) {
        return 0;
    }
    return arr[n - 1] + sumOfArray(arr, n - 1);
}

// 8. Reverse a String
void reverseString(string &str, int start, int end) {
    if (start >= end) {
        return;
    }
    swap(str[start], str[end]);
    reverseString(str, start + 1, end - 1);
}

// 9. Palindrome Check
bool isPalindrome(string str, int start, int end) {
    if (start >= end) {
        return true;
    }
    if (str[start] != str[end]) {
        return false;
    }
    return isPalindrome(str, start + 1, end - 1);
}

// 10. Print Numbers from 1 to N
void printNumbers(int n) {
    if (n <= 0) {
        return;
    }
    printNumbers(n - 1);
    cout << n << " ";
}

int main() {
    // You can test these recursive functions here
    return 0;
}
